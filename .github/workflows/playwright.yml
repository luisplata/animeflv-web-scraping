name: Playwright Tests
on:
  workflow_dispatch:
    inputs:
      animeName:
        description: 'Name of the anime'
        required: true
      discordWebhook:
        description: 'Discord webhook to send the report'
        required: false
      Webhook:
        description: 'webhook to send the result'
        required: false
      uuid:
        description: 'User UUID'
        required: true
      searchType:
        type: choice
        description: 'Type of search (OfDay or AllCaps)'
        required: true
        default: 'AllCaps'
        options:
          - OfDay
          - AllCaps
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  karate-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          if [ "${{ github.event.inputs.searchType }}" == "OfDay" ]; then
            ANIME_NAME="${{ github.event.inputs.animeName }}" DISCORD_WEBHOOK="${{ github.event.inputs.discordWebhook }}" npx playwright test tests/AnimeFLV/test/listAnimeOfDay.spec.ts
          else
            ANIME_NAME="${{ github.event.inputs.animeName }}" DISCORD_WEBHOOK="${{ github.event.inputs.discordWebhook }}" npx playwright test tests/AnimeFLV/test/getAllCapsByAnime.spec.ts
          fi
        env:
          CI: true

      - name: check files to upload
        run: |
          ls results/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: results/
          retention-days: 30

  send-webhook:
    needs: karate-tests
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.Webhook != '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: results/

      - name: Read JSON output
        id: read_output
        run: |
          if [ "${{ github.event.inputs.searchType }}" == "OfDay" ]; then
            cat results/results_of_day.json
            echo "json_output=$(jq -c . results/results_of_day.json)" >> $GITHUB_ENV
          else
            cat results/results_all_caps.json
            echo "json_output=$(jq -c . results/results_all_caps.json)" >> $GITHUB_ENV
          fi

      - name: Send Webhook to Backend
        run: |
          curl -X POST "${{ github.event.inputs.Webhook }}" \
                -H "Content-Type: application/json" \
                -d '{
                      "uuid": "${{ github.event.inputs.uuid }}",
                      "animeName": "${{ github.event.inputs.animeName }}",
                      "status": "completed",
                      "results": ${{ env.json_output }}
                    }'

  mega-operations:
    needs: karate-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: results/

      # Instalar MEGAcmd correctamente
      - name: Install MEGAcmd
        run: |
          sudo apt update
          sudo apt install -y gnupg wget
          wget -O- https://mega.nz/linux/repo/Debian_11/Release.key | sudo tee /etc/apt/trusted.gpg.d/mega.asc
          echo "deb https://mega.nz/linux/repo/Debian_11/ ./" | sudo tee /etc/apt/sources.list.d/megacmd.list
          sudo apt update
          sudo apt install -y megacmd
          mega-login "${{ secrets.MEGA_EMAIL }}" "${{ secrets.MEGA_PASSWORD }}"

      # Descargar archivos desde MEGA
      - name: Download files from MEGA
        run: |
          mkdir -p mega_downloads
          jq -r '.[] | .caps[].view_url[0]' results/results_all_caps.json | while read -r link; do
            formatted_link=$(echo "$link" | sed -E 's|https://mega.nz/embed/!([^!]*)!([^ ]*)|https://mega.nz/file/\1#\2|')
            echo "‚¨áÔ∏è Descargando $formatted_link..."
            mega-get "$formatted_link" mega_downloads/ || echo "‚ùå Error descargando $formatted_link, continuando con el siguiente..."
          done

      # Subir archivos nuevamente a MEGA
      - name: Upload files to My MEGA
        run: |
          mkdir -p mega_uploaded
          for file in mega_downloads/*; do
            # Extraer nombre del anime desde el JSON
            anime_name=$(jq -r '.[] | .name[0]' results/results_all_caps.json | tr -d '[:space:]')
            
            # Crear carpeta con el nombre del anime
            remote_folder="/Pery_SonPruebasNoLaBorres/anime/$anime_name"
            mega-mkdir -p "$remote_folder"
            
            # Agregar timestamp al nombre del archivo
            timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
            new_filename="${timestamp}_$(basename "$file")"
            local_temp_file="mega_downloads/$new_filename"
            
            # Renombrar localmente
            mv "$file" "$local_temp_file"
            
            echo "üì§ Subiendo $new_filename a MEGA en $remote_folder..."
            mega-put -c "$local_temp_file" "$remote_folder"
            
            # Esperar para sincronizaci√≥n
            sleep 2
            
            # Obtener el link del archivo subido
            remote_path="$remote_folder/$new_filename"
            echo "üîó Obteniendo enlace de descarga para $remote_path..."
            
            uploaded_link=$(mega-export -a "$remote_path" | grep 'https://')
            
            if [[ -z "$uploaded_link" ]]; then
            echo "‚ùå Error obteniendo el enlace de $remote_path"
            continue
            fi
            
            echo "‚úÖ Archivo subido: $uploaded_link"
            
            # Guardar resultado en JSON
            echo "{\"original\": \"$file\", \"renamed\": \"$new_filename\", \"uploaded\": \"$uploaded_link\"}" >> mega_uploaded/result.json
          done
          echo "üöÄ Proceso completado."

# Fusionar JSON con enlaces nuevos
      - name: Merge upload links with original JSON
        run: |
          jq --slurpfile new_data mega_uploaded/result.json '.links |= . + $new_data' results/results_all_caps.json > results/results_updated.json

      # Subir JSON actualizado
      - name: Upload updated JSON
        uses: actions/upload-artifact@v4
        with:
          name: updated-results
          path: results/results_updated.json
          retention-days: 30

      # Limpiar datos y cach√© residual
      - name: Cleanup MEGA cache
        run: |
          mega-logout
          rm -rf mega_downloads mega_uploaded
          rm -f results/results_updated.json
